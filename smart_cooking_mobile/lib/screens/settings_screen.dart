import 'package:flutter/material.dart';

class SettingsScreen extends StatefulWidget {
  const SettingsScreen({super.key});

  @override
  State<SettingsScreen> createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  String _selectedLanguage = 'vi';
  bool _notificationsEnabled = true;
  bool _darkModeEnabled = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('‚öôÔ∏è C√†i ƒë·∫∑t')),
      body: ListView(
        children: [
          // Language Settings
          ListTile(
            leading: const Icon(Icons.language),
            title: const Text('Ng√¥n ng·ªØ'),
            subtitle: Text(_getLanguageName(_selectedLanguage)),
            trailing: const Icon(Icons.arrow_forward_ios),
            onTap: _showLanguageSelector,
          ),

          // Notifications
          SwitchListTile(
            secondary: const Icon(Icons.notifications),
            title: const Text('Th√¥ng b√°o'),
            subtitle: const Text('Nh·∫≠n th√¥ng b√°o v·ªÅ c√¥ng th·ª©c m·ªõi'),
            value: _notificationsEnabled,
            onChanged: (bool value) {
              setState(() {
                _notificationsEnabled = value;
              });
            },
          ),

          // Dark Mode
          SwitchListTile(
            secondary: const Icon(Icons.dark_mode),
            title: const Text('Ch·∫ø ƒë·ªô t·ªëi'),
            subtitle: const Text('S·ª≠ d·ª•ng giao di·ªán t·ªëi'),
            value: _darkModeEnabled,
            onChanged: (bool value) {
              setState(() {
                _darkModeEnabled = value;
              });
            },
          ),

          const Divider(),

          // About Section
          ListTile(
            leading: const Icon(Icons.info),
            title: const Text('V·ªÅ ·ª©ng d·ª•ng'),
            subtitle: const Text('Smart Cooking AI v1.0.0'),
            onTap: _showAboutDialog,
          ),

          // API Status
          ListTile(
            leading: const Icon(Icons.api),
            title: const Text('Tr·∫°ng th√°i API'),
            subtitle: const Text('Ki·ªÉm tra k·∫øt n·ªëi d·ªãch v·ª•'),
            trailing: const Icon(Icons.arrow_forward_ios),
            onTap: _showApiStatus,
          ),

          // Help & Support
          ListTile(
            leading: const Icon(Icons.help),
            title: const Text('Tr·ª£ gi√∫p & H·ªó tr·ª£'),
            subtitle: const Text('H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng v√† li√™n h·ªá'),
            trailing: const Icon(Icons.arrow_forward_ios),
            onTap: _showHelpDialog,
          ),
        ],
      ),
    );
  }

  String _getLanguageName(String code) {
    switch (code) {
      case 'vi':
        return 'üáªüá≥ Ti·∫øng Vi·ªát';
      case 'en':
        return 'üá∫üá∏ English';
      case 'ja':
        return 'üáØüáµ Êó•Êú¨Ë™û';
      default:
        return 'üáªüá≥ Ti·∫øng Vi·ªát';
    }
  }

  void _showLanguageSelector() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Ch·ªçn ng√¥n ng·ªØ'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            RadioListTile<String>(
              title: const Text('üáªüá≥ Ti·∫øng Vi·ªát'),
              value: 'vi',
              groupValue: _selectedLanguage,
              onChanged: (value) {
                setState(() {
                  _selectedLanguage = value!;
                });
                Navigator.pop(context);
              },
            ),
            RadioListTile<String>(
              title: const Text('üá∫üá∏ English'),
              value: 'en',
              groupValue: _selectedLanguage,
              onChanged: (value) {
                setState(() {
                  _selectedLanguage = value!;
                });
                Navigator.pop(context);
              },
            ),
            RadioListTile<String>(
              title: const Text('üáØüáµ Êó•Êú¨Ë™û'),
              value: 'ja',
              groupValue: _selectedLanguage,
              onChanged: (value) {
                setState(() {
                  _selectedLanguage = value!;
                });
                Navigator.pop(context);
              },
            ),
          ],
        ),
      ),
    );
  }

  void _showAboutDialog() {
    showAboutDialog(
      context: context,
      applicationName: 'Smart Cooking AI',
      applicationVersion: '1.0.0',
      applicationIcon: const Icon(Icons.restaurant_menu, size: 48),
      children: [
        const Text('H·ªá th·ªëng n·∫•u ƒÉn th√¥ng minh v·ªõi AI'),
        const SizedBox(height: 16),
        const Text('T√≠ch h·ª£p:'),
        const Text('‚Ä¢ OpenAI GPT cho t·∫°o c√¥ng th·ª©c'),
        const Text('‚Ä¢ Google Maps cho t√¨m c·ª≠a h√†ng'),
        const Text('‚Ä¢ Nh·∫≠n d·∫°ng gi·ªçng n√≥i'),
        const Text('‚Ä¢ G·ª£i √Ω m√≥n ƒÉn theo v√πng mi·ªÅn'),
      ],
    );
  }

  void _showApiStatus() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('üîå Tr·∫°ng th√°i API'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildStatusRow('AI Service', true, 'Mock mode'),
            _buildStatusRow('Backend', false, 'Connecting...'),
            _buildStatusRow('Google Maps', true, 'Mock data'),
            _buildStatusRow('OpenAI', false, 'Quota exceeded'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('ƒê√≥ng'),
          ),
        ],
      ),
    );
  }

  Widget _buildStatusRow(String service, bool isOnline, String note) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          Icon(
            isOnline ? Icons.check_circle : Icons.error,
            color: isOnline ? Colors.green : Colors.red,
            size: 16,
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  service,
                  style: const TextStyle(fontWeight: FontWeight.bold),
                ),
                Text(
                  note,
                  style: const TextStyle(fontSize: 12, color: Colors.grey),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _showHelpDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('üìñ Tr·ª£ gi√∫p'),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('üè† Trang ch·ªß: T·∫°o c√¥ng th·ª©c t·ª´ nguy√™n li·ªáu'),
            SizedBox(height: 8),
            Text('ü§ñ AI Chat: Tr√≤ chuy·ªán v·ªõi tr·ª£ l√Ω n·∫•u ƒÉn'),
            SizedBox(height: 8),
            Text('üìù C√¥ng th·ª©c: Xem v√† l∆∞u c√¥ng th·ª©c'),
            SizedBox(height: 8),
            Text('‚öôÔ∏è C√†i ƒë·∫∑t: T√πy ch·ªânh ·ª©ng d·ª•ng'),
            SizedBox(height: 16),
            Text(
              'üí° M·∫πo: T·∫•t c·∫£ t√≠nh nƒÉng hi·ªán ƒëang ch·∫°y v·ªõi d·ªØ li·ªáu m·∫´u ƒë·ªÉ demo.',
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Hi·ªÉu r·ªìi'),
          ),
        ],
      ),
    );
  }
}
