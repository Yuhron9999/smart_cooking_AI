import 'package:flutter/material.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final List<String> _ingredients = [];
  final TextEditingController _ingredientController = TextEditingController();
  String _selectedLanguage = 'vi';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('üç≥ Smart Cooking AI'),
        actions: [
          PopupMenuButton<String>(
            onSelected: (String languageCode) {
              setState(() {
                _selectedLanguage = languageCode;
              });
            },
            itemBuilder: (BuildContext context) => [
              const PopupMenuItem(value: 'vi', child: Text('üáªüá≥ Ti·∫øng Vi·ªát')),
              const PopupMenuItem(value: 'en', child: Text('üá∫üá∏ English')),
              const PopupMenuItem(value: 'ja', child: Text('üáØüáµ Êó•Êú¨Ë™û')),
            ],
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Welcome section
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      _getLocalizedText('welcome'),
                      style: Theme.of(context).textTheme.headlineSmall,
                    ),
                    const SizedBox(height: 8),
                    Text(
                      _getLocalizedText('tagline'),
                      style: Theme.of(context).textTheme.bodyMedium,
                    ),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 24),

            // Quick actions
            Text(
              _getLocalizedText('quick_actions'),
              style: Theme.of(context).textTheme.headlineSmall,
            ),
            const SizedBox(height: 16),

            GridView.count(
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              crossAxisCount: 2,
              crossAxisSpacing: 16,
              mainAxisSpacing: 16,
              children: [
                _buildActionCard(
                  icon: Icons.auto_awesome,
                  title: _getLocalizedText('recipe_generation'),
                  onTap: () => _showRecipeGenerator(),
                ),
                _buildActionCard(
                  icon: Icons.chat,
                  title: _getLocalizedText('chatbot'),
                  onTap: () => Navigator.pushNamed(context, '/ai-chat'),
                ),
                _buildActionCard(
                  icon: Icons.restaurant_menu,
                  title: _getLocalizedText('recipes'),
                  onTap: () => Navigator.pushNamed(context, '/recipes'),
                ),
                _buildActionCard(
                  icon: Icons.settings,
                  title: _getLocalizedText('settings'),
                  onTap: () => Navigator.pushNamed(context, '/settings'),
                ),
              ],
            ),

            const SizedBox(height: 24),

            // Regional suggestions
            _buildRegionalSuggestions(),
          ],
        ),
      ),
      bottomNavigationBar: BottomNavigationBar(
        type: BottomNavigationBarType.fixed,
        items: [
          BottomNavigationBarItem(
            icon: const Icon(Icons.home),
            label: _getLocalizedText('home'),
          ),
          BottomNavigationBarItem(
            icon: const Icon(Icons.restaurant_menu),
            label: _getLocalizedText('recipes'),
          ),
          BottomNavigationBarItem(
            icon: const Icon(Icons.chat),
            label: _getLocalizedText('ai_chat'),
          ),
          BottomNavigationBarItem(
            icon: const Icon(Icons.settings),
            label: _getLocalizedText('settings'),
          ),
        ],
        onTap: (index) {
          switch (index) {
            case 0:
              // Already on home
              break;
            case 1:
              Navigator.pushNamed(context, '/recipes');
              break;
            case 2:
              Navigator.pushNamed(context, '/ai-chat');
              break;
            case 3:
              Navigator.pushNamed(context, '/settings');
              break;
          }
        },
      ),
    );
  }

  Widget _buildActionCard({
    required IconData icon,
    required String title,
    required VoidCallback onTap,
  }) {
    return Card(
      child: InkWell(
        onTap: onTap,
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(icon, size: 48, color: Colors.green),
              const SizedBox(height: 8),
              Text(
                title,
                style: Theme.of(context).textTheme.bodyMedium,
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildRegionalSuggestions() {
    final suggestions = _getRegionalSuggestions();

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          _getLocalizedText('regional_suggestions'),
          style: Theme.of(context).textTheme.headlineSmall,
        ),
        const SizedBox(height: 16),
        SizedBox(
          height: 120,
          child: ListView.builder(
            scrollDirection: Axis.horizontal,
            itemCount: suggestions.length,
            itemBuilder: (context, index) {
              return Container(
                width: 200,
                margin: const EdgeInsets.only(right: 16),
                child: Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const Icon(Icons.restaurant, size: 32),
                        const SizedBox(height: 8),
                        Text(
                          suggestions[index],
                          style: Theme.of(context).textTheme.bodyMedium,
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  ),
                ),
              );
            },
          ),
        ),
      ],
    );
  }

  void _showRecipeGenerator() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) => DraggableScrollableSheet(
        initialChildSize: 0.7,
        maxChildSize: 0.9,
        minChildSize: 0.5,
        builder: (context, scrollController) => Container(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              Text(
                _getLocalizedText('ingredients'),
                style: Theme.of(context).textTheme.headlineSmall,
              ),
              const SizedBox(height: 16),

              // Add ingredient field
              Row(
                children: [
                  Expanded(
                    child: TextField(
                      controller: _ingredientController,
                      decoration: InputDecoration(
                        hintText: _getLocalizedText('add_ingredient'),
                        border: const OutlineInputBorder(),
                      ),
                    ),
                  ),
                  const SizedBox(width: 8),
                  IconButton(
                    onPressed: _addIngredient,
                    icon: const Icon(Icons.add),
                  ),
                ],
              ),

              const SizedBox(height: 16),

              // Ingredients list
              Expanded(
                child: ListView.builder(
                  controller: scrollController,
                  itemCount: _ingredients.length,
                  itemBuilder: (context, index) {
                    return ListTile(
                      title: Text(_ingredients[index]),
                      trailing: IconButton(
                        icon: const Icon(Icons.remove_circle),
                        onPressed: () => _removeIngredient(index),
                      ),
                    );
                  },
                ),
              ),

              // Generate button
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: _ingredients.isNotEmpty ? _generateRecipe : null,
                  child: Text(_getLocalizedText('create_recipe')),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _addIngredient() {
    if (_ingredientController.text.isNotEmpty) {
      setState(() {
        _ingredients.add(_ingredientController.text);
        _ingredientController.clear();
      });
    }
  }

  void _removeIngredient(int index) {
    setState(() {
      _ingredients.removeAt(index);
    });
  }

  void _generateRecipe() {
    Navigator.pop(context); // Close modal

    // Show mock recipe result
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(_getLocalizedText('recipe_title')),
        content: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'üç≤ ${_getLocalizedText('recipe_from_ingredients')}',
                style: const TextStyle(
                  fontWeight: FontWeight.bold,
                  fontSize: 16,
                ),
              ),
              const SizedBox(height: 8),
              Text('${_getLocalizedText('ingredients')}:'),
              ..._ingredients.map((ing) => Text('‚Ä¢ $ing')),
              const SizedBox(height: 16),
              Text('${_getLocalizedText('instructions')}:'),
              Text(_getLocalizedText('mock_instructions')),
              const SizedBox(height: 16),
              Text(
                '‚è±Ô∏è ${_getLocalizedText('cooking_time')}: 20 ${_getLocalizedText('minutes')}',
              ),
              Text(
                'üìä ${_getLocalizedText('difficulty')}: ${_getLocalizedText('easy')}',
              ),
              const SizedBox(height: 8),
              const Text(
                'üí° Mock data - Connecting to real AI service...',
                style: TextStyle(
                  fontStyle: FontStyle.italic,
                  color: Colors.orange,
                ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text(_getLocalizedText('close')),
          ),
        ],
      ),
    );
  }

  String _getLocalizedText(String key) {
    final translations = {
      'vi': {
        'welcome': 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi Smart Cooking AI',
        'tagline': 'H·ªá th·ªëng n·∫•u ƒÉn th√¥ng minh v·ªõi AI',
        'quick_actions': 'Thao t√°c nhanh',
        'recipe_generation': 'T·∫°o c√¥ng th·ª©c t·ª´ AI',
        'chatbot': 'Tr√≤ chuy·ªán v·ªõi AI',
        'recipes': 'C√¥ng th·ª©c',
        'settings': 'C√†i ƒë·∫∑t',
        'home': 'Trang ch·ªß',
        'ai_chat': 'AI Chat',
        'regional_suggestions': 'G·ª£i √Ω m√≥n ƒÉn theo v√πng',
        'ingredients': 'Nguy√™n li·ªáu',
        'add_ingredient': 'Th√™m nguy√™n li·ªáu',
        'create_recipe': 'T·∫°o c√¥ng th·ª©c',
        'recipe_title': 'C√¥ng th·ª©c n·∫•u ƒÉn',
        'recipe_from_ingredients': 'M√≥n ƒÉn t·ª´ nguy√™n li·ªáu c√≥ s·∫µn',
        'instructions': 'H∆∞·ªõng d·∫´n',
        'cooking_time': 'Th·ªùi gian n·∫•u',
        'difficulty': 'ƒê·ªô kh√≥',
        'minutes': 'ph√∫t',
        'easy': 'D·ªÖ',
        'close': 'ƒê√≥ng',
        'mock_instructions':
            '1. S∆° ch·∫ø nguy√™n li·ªáu s·∫°ch\n2. ƒêun n√≥ng ch·∫£o v·ªõi d·∫ßu\n3. Cho nguy√™n li·ªáu v√†o ch·∫£o\n4. N√™m n∆∞·ªõc m·∫Øm, mu·ªëi, ti√™u\n5. ƒê·∫£o ƒë·ªÅu v√† n·∫•u 15 ph√∫t\n6. Trang tr√≠ v√† th∆∞·ªüng th·ª©c',
      },
      'en': {
        'welcome': 'Welcome to Smart Cooking AI',
        'tagline': 'Intelligent cooking system with AI',
        'quick_actions': 'Quick Actions',
        'recipe_generation': 'AI Recipe Generation',
        'chatbot': 'Chat with AI',
        'recipes': 'Recipes',
        'settings': 'Settings',
        'home': 'Home',
        'ai_chat': 'AI Chat',
        'regional_suggestions': 'Regional Food Suggestions',
        'ingredients': 'Ingredients',
        'add_ingredient': 'Add ingredient',
        'create_recipe': 'Create Recipe',
        'recipe_title': 'Cooking Recipe',
        'recipe_from_ingredients': 'Recipe from Available Ingredients',
        'instructions': 'Instructions',
        'cooking_time': 'Cooking Time',
        'difficulty': 'Difficulty',
        'minutes': 'minutes',
        'easy': 'Easy',
        'close': 'Close',
        'mock_instructions':
            '1. Clean and prepare ingredients\n2. Heat oil in pan\n3. Add ingredients to pan\n4. Season with salt and pepper\n5. Stir and cook for 15 minutes\n6. Garnish and serve',
      },
      'ja': {
        'welcome': 'Smart Cooking AI„Å∏„Çà„ÅÜ„Åì„Åù',
        'tagline': 'AI„Çí‰Ωø„Å£„Åü„Ç§„É≥„ÉÜ„É™„Ç∏„Çß„É≥„ÉàÊñôÁêÜ„Ç∑„Çπ„ÉÜ„É†',
        'quick_actions': '„ÇØ„Ç§„ÉÉ„ÇØ„Ç¢„ÇØ„Ç∑„Éß„É≥',
        'recipe_generation': 'AI„É¨„Ç∑„ÉîÁîüÊàê',
        'chatbot': 'AI„Å®„ÉÅ„É£„ÉÉ„Éà',
        'recipes': '„É¨„Ç∑„Éî',
        'settings': 'Ë®≠ÂÆö',
        'home': '„Éõ„Éº„É†',
        'ai_chat': 'AI„ÉÅ„É£„ÉÉ„Éà',
        'regional_suggestions': 'Âú∞ÂüüÊñôÁêÜ„ÅÆÊèêÊ°à',
        'ingredients': 'ÊùêÊñô',
        'add_ingredient': 'ÊùêÊñô„ÇíËøΩÂä†',
        'create_recipe': '„É¨„Ç∑„Éî„Çí‰ΩúÊàê',
        'recipe_title': 'ÊñôÁêÜ„É¨„Ç∑„Éî',
        'recipe_from_ingredients': 'ÊùêÊñô„Åã„Çâ‰Ωú„ÇãÊñôÁêÜ',
        'instructions': 'ÊâãÈ†Ü',
        'cooking_time': 'Ë™øÁêÜÊôÇÈñì',
        'difficulty': 'Èõ£ÊòìÂ∫¶',
        'minutes': 'ÂàÜ',
        'easy': 'Á∞°Âçò',
        'close': 'Èñâ„Åò„Çã',
        'mock_instructions':
            '1. ÊùêÊñô„Çí„Åç„Çå„ÅÑ„Å´„Åô„Çã\n2. „Éï„É©„Ç§„Éë„É≥„ÅßÊ≤π„ÇíÁÜ±„Åô„Çã\n3. ÊùêÊñô„Çí„Éï„É©„Ç§„Éë„É≥„Å´Âä†„Åà„Çã\n4. Â°©„Ç≥„Ç∑„Éß„Ç¶„ÅßÂë≥‰ªò„Åë\n5. Ê∑∑„Åú„Å¶15ÂàÜË™øÁêÜ\n6. Áõõ„Çä‰ªò„Åë„Å¶ÂÆåÊàê',
      },
    };

    return translations[_selectedLanguage]?[key] ?? key;
  }

  List<String> _getRegionalSuggestions() {
    final suggestions = {
      'vi': ['Ph·ªü H√† N·ªôi', 'B√∫n ch·∫£', 'B√°nh cu·ªën', 'Ch·∫£ c√° L√£ V·ªçng'],
      'en': ['Vietnamese Pho', 'Bun Cha', 'Rice Rolls', 'Grilled Fish'],
      'ja': ['„Éô„Éà„Éä„É†„Éï„Ç©„Éº', '„Éñ„É≥„ÉÅ„É£„Éº', '„É©„Ç§„Çπ„É≠„Éº„É´', 'ÁÑº„ÅçÈ≠ö'],
    };

    return suggestions[_selectedLanguage] ?? suggestions['vi']!;
  }
}
