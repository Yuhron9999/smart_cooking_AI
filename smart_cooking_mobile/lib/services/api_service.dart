import 'dart:convert';
import 'package:http/http.dart' as http;

class ApiService {
  // Mock data for development when services are not available
  static const String _baseUrl = 'http://localhost:8001';
  static const String _backendUrl = 'http://localhost:8080';

  // Get recent recipes
  Future<List<Map<String, dynamic>>> getRecentRecipes({
    String language = 'vi',
    int limit = 10,
  }) async {
    try {
      final response = await http.get(
        Uri.parse(
          '$_backendUrl/api/recipes/recent?limit=$limit&language=$language',
        ),
        headers: {'Content-Type': 'application/json'},
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return List<Map<String, dynamic>>.from(data['recipes'] ?? []);
      } else {
        // Fallback to mock data
        return _getMockRecentRecipes(language);
      }
    } catch (e) {
      print('API Error: $e');
      return _getMockRecentRecipes(language);
    }
  }

  // AI Service endpoints
  Future<Map<String, dynamic>> generateRecipe(
    List<String> ingredients, {
    String language = 'vi',
  }) async {
    try {
      final response = await http.post(
        Uri.parse('$_baseUrl/api/ai/generate-recipe'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'ingredients': ingredients,
          'language': language,
          'dietary_restrictions': [],
          'cooking_time': 30,
          'difficulty': 'medium',
        }),
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        // Fallback to mock data
        return _getMockRecipe(ingredients, language);
      }
    } catch (e) {
      print('API Error: $e');
      return _getMockRecipe(ingredients, language);
    }
  }

  Future<Map<String, dynamic>> chatWithAI(
    String message, {
    String language = 'vi',
  }) async {
    try {
      final response = await http.post(
        Uri.parse('$_baseUrl/api/ai/chat'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'message': message,
          'language': language,
          'context': [],
        }),
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        return _getMockChatResponse(message, language);
      }
    } catch (e) {
      print('API Error: $e');
      return _getMockChatResponse(message, language);
    }
  }

  Future<Map<String, dynamic>> getRegionalSuggestions(
    double lat,
    double lng,
  ) async {
    try {
      final response = await http.post(
        Uri.parse('$_baseUrl/api/maps/regional-suggestions'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'latitude': lat, 'longitude': lng}),
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        return _getMockRegionalSuggestions(lat, lng);
      }
    } catch (e) {
      print('API Error: $e');
      return _getMockRegionalSuggestions(lat, lng);
    }
  }

  Future<Map<String, dynamic>> findNearbyStores(
    double lat,
    double lng, {
    String storeType = 'supermarket',
  }) async {
    try {
      final response = await http.post(
        Uri.parse('$_baseUrl/api/maps/nearby-search'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'latitude': lat,
          'longitude': lng,
          'radius': 2000,
          'place_type': storeType,
        }),
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        return _getMockNearbyStores(lat, lng);
      }
    } catch (e) {
      print('API Error: $e');
      return _getMockNearbyStores(lat, lng);
    }
  }

  // Mock data methods
  Map<String, dynamic> _getMockRecipe(
    List<String> ingredients,
    String language,
  ) {
    final vietnameseRecipes = {
      'success': true,
      'recipe':
          '''
üç≤ **M√≥n ƒÉn t·ª´ nguy√™n li·ªáu c√≥ s·∫µn**

**Nguy√™n li·ªáu:**
${ingredients.map((ing) => '‚Ä¢ $ing').join('\n')}

**C√°ch l√†m:**
1. S∆° ch·∫ø nguy√™n li·ªáu s·∫°ch
2. ƒêun n√≥ng ch·∫£o v·ªõi m·ªôt √≠t d·∫ßu
3. Cho nguy√™n li·ªáu v√†o ch·∫£o theo th·ª© t·ª± t·ª´ kh√≥ ch√≠n ƒë·∫øn d·ªÖ ch√≠n
4. N√™m n∆∞·ªõc m·∫Øm, mu·ªëi, ti√™u v·ª´a ƒÉn
5. ƒê·∫£o ƒë·ªÅu v√† n·∫•u trong 10-15 ph√∫t
6. Trang tr√≠ v√† th∆∞·ªüng th·ª©c

**L∆∞u √Ω:** C√≥ th·ªÉ th√™m gia v·ªã theo kh·∫©u v·ªã c√° nh√¢n.
      ''',
      'language': language,
      'ingredients_used': ingredients,
      'cooking_time': '20 ph√∫t',
      'difficulty': 'D·ªÖ',
      'mock_data': true,
    };

    return language == 'vi'
        ? vietnameseRecipes
        : {
            'success': true,
            'recipe':
                '''
üç≤ **Recipe from Available Ingredients**

**Ingredients:**
${ingredients.map((ing) => '‚Ä¢ $ing').join('\n')}

**Instructions:**
1. Clean and prepare all ingredients
2. Heat oil in a pan
3. Add ingredients in order from hardest to softest to cook
4. Season with salt, pepper, and preferred seasonings
5. Stir and cook for 10-15 minutes
6. Garnish and serve

**Note:** Adjust seasonings to taste.
      ''',
            'language': language,
            'ingredients_used': ingredients,
            'cooking_time': '20 minutes',
            'difficulty': 'Easy',
            'mock_data': true,
          };
  }

  Map<String, dynamic> _getMockChatResponse(String message, String language) {
    if (language == 'vi') {
      return {
        'success': true,
        'response':
            'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI n·∫•u ƒÉn. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ v·ªÅ n·∫•u ƒÉn h√¥m nay? T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·∫°o c√¥ng th·ª©c, t∆∞ v·∫•n nguy√™n li·ªáu, ho·∫∑c h∆∞·ªõng d·∫´n c√°c k·ªπ thu·∫≠t n·∫•u ƒÉn.',
        'language': language,
        'model_used': 'Mock AI Assistant',
        'mock_data': true,
      };
    } else {
      return {
        'success': true,
        'response':
            'Hello! I\'m your AI cooking assistant. How can I help you with cooking today? I can help create recipes, suggest ingredients, or guide you through cooking techniques.',
        'language': language,
        'model_used': 'Mock AI Assistant',
        'mock_data': true,
      };
    }
  }

  Map<String, dynamic> _getMockRegionalSuggestions(double lat, double lng) {
    String region = 'mien_bac';
    List<String> suggestions = [
      'Ph·ªü H√† N·ªôi',
      'B√∫n ch·∫£',
      'B√°nh cu·ªën',
      'Ch·∫£ c√° L√£ V·ªçng',
    ];

    if (lat > 20.0) {
      region = 'mien_bac';
      suggestions = ['Ph·ªü H√† N·ªôi', 'B√∫n ch·∫£', 'B√°nh cu·ªën', 'Ch·∫£ c√° L√£ V·ªçng'];
    } else if (lat > 16.0) {
      region = 'mien_trung';
      suggestions = ['B√∫n b√≤ Hu·∫ø', 'M√¨ Qu·∫£ng', 'Cao l·∫ßu', 'B√°nh kho√°i'];
    } else {
      region = 'mien_nam';
      suggestions = ['B√°nh x√®o', 'H·ªß ti·∫øu', 'B√∫n th·ªãt n∆∞·ªõng', 'Ch√® ba m√†u'];
    }

    return {
      'success': true,
      'region': region,
      'suggestions': suggestions,
      'location': {'lat': lat, 'lng': lng},
      'mock_data': true,
    };
  }

  Map<String, dynamic> _getMockNearbyStores(double lat, double lng) {
    return {
      'status': 'OK',
      'results': [
        {
          'place_id': 'mock_001',
          'name': 'Si√™u th·ªã Big C ThƒÉng Long',
          'vicinity': '222 Tr·∫ßn Duy H∆∞ng, C·∫ßu Gi·∫•y, H√† N·ªôi',
          'rating': 4.2,
          'types': ['supermarket', 'food'],
          'geometry': {
            'location': {'lat': lat + 0.001, 'lng': lng + 0.001},
          },
          'distance': 150,
        },
        {
          'place_id': 'mock_002',
          'name': 'Ch·ª£ H√≤a B√¨nh',
          'vicinity': 'Ph·ªë H√≤a B√¨nh, Ba ƒê√¨nh, H√† N·ªôi',
          'rating': 4.0,
          'types': ['market', 'food'],
          'geometry': {
            'location': {'lat': lat + 0.002, 'lng': lng - 0.001},
          },
          'distance': 300,
        },
      ],
      'mock_data': true,
    };
  }

  List<Map<String, dynamic>> _getMockRecentRecipes(String language) {
    if (language == 'vi') {
      return [
        {
          'id': 1,
          'title': 'Ph·ªü B√≤ H√† N·ªôi',
          'description':
              'M√≥n ph·ªü truy·ªÅn th·ªëng H√† N·ªôi v·ªõi n∆∞·ªõc d√πng trong v·∫Øt, th·ªãt b√≤ m·ªÅm',
          'imageUrl':
              'https://images.unsplash.com/photo-1586190848861-99aa4a171e90?w=400',
          'cookingTime': '2 gi·ªù',
          'difficulty': 'Kh√≥',
          'rating': 4.8,
          'servings': 4,
          'category': 'vietnamese',
          'ingredients': [
            'X∆∞∆°ng b√≤',
            'Th·ªãt b√≤',
            'B√°nh ph·ªü',
            'H√†nh t√¢y',
            'G·ª´ng',
          ],
        },
        {
          'id': 2,
          'title': 'B√°nh X√®o Mi·ªÅn T√¢y',
          'description': 'B√°nh x√®o gi√≤n r·ª•m v·ªõi nh√¢n t√¥m th·ªãt, ƒÉn k√®m rau s·ªëng',
          'imageUrl':
              'https://images.unsplash.com/photo-1559847844-5315695dadae?w=400',
          'cookingTime': '45 ph√∫t',
          'difficulty': 'Trung b√¨nh',
          'rating': 4.6,
          'servings': 6,
          'category': 'vietnamese',
          'ingredients': ['B·ªôt g·∫°o', 'T√¥m', 'Th·ªãt ba ch·ªâ', 'Gi√° ƒë·ªó', 'Ngh·ªá'],
        },
        {
          'id': 3,
          'title': 'G√† Kung Pao',
          'description': 'M√≥n g√† x√†o ki·ªÉu T·ª© Xuy√™n v·ªõi ƒë·∫≠u ph·ªông v√† ·ªõt kh√¥',
          'imageUrl':
              'https://images.unsplash.com/photo-1603133872878-684f208fb84b?w=400',
          'cookingTime': '30 ph√∫t',
          'difficulty': 'D·ªÖ',
          'rating': 4.4,
          'servings': 4,
          'category': 'asian',
          'ingredients': ['Th·ªãt g√†', 'ƒê·∫≠u ph·ªông', '·ªöt kh√¥', 'T·ªèi', 'G·ª´ng'],
        },
        {
          'id': 4,
          'title': 'Pasta Carbonara',
          'description': 'Pasta √ù c·ªï ƒëi·ªÉn v·ªõi bacon, tr·ª©ng v√† ph√¥ mai Parmesan',
          'imageUrl':
              'https://images.unsplash.com/photo-1588013273468-315900bafd4d?w=400',
          'cookingTime': '25 ph√∫t',
          'difficulty': 'Trung b√¨nh',
          'rating': 4.5,
          'servings': 2,
          'category': 'western',
          'ingredients': [
            'Spaghetti',
            'Bacon',
            'Tr·ª©ng',
            'Ph√¥ mai Parmesan',
            'T·ªèi',
          ],
        },
        {
          'id': 5,
          'title': 'B√°nh Flan Caramel',
          'description': 'B√°nh flan m·ªÅm m·ªãn v·ªõi l·ªõp caramel ƒë·∫Øng ng·ªçt',
          'imageUrl':
              'https://images.unsplash.com/photo-1551024506-0bccd828d307?w=400',
          'cookingTime': '1 gi·ªù',
          'difficulty': 'Trung b√¨nh',
          'rating': 4.7,
          'servings': 6,
          'category': 'dessert',
          'ingredients': ['Tr·ª©ng', 'S·ªØa', 'ƒê∆∞·ªùng', 'Vanilla', 'Caramel'],
        },
      ];
    } else {
      return [
        {
          'id': 1,
          'title': 'Hanoi Beef Pho',
          'description':
              'Traditional Hanoi pho with clear broth and tender beef',
          'imageUrl':
              'https://images.unsplash.com/photo-1586190848861-99aa4a171e90?w=400',
          'cookingTime': '2 hours',
          'difficulty': 'Hard',
          'rating': 4.8,
          'servings': 4,
          'category': 'vietnamese',
          'ingredients': [
            'Beef bones',
            'Beef',
            'Rice noodles',
            'Onion',
            'Ginger',
          ],
        },
        {
          'id': 2,
          'title': 'Vietnamese Pancake',
          'description': 'Crispy pancake with shrimp and pork filling',
          'imageUrl':
              'https://images.unsplash.com/photo-1559847844-5315695dadae?w=400',
          'cookingTime': '45 minutes',
          'difficulty': 'Medium',
          'rating': 4.6,
          'servings': 6,
          'category': 'vietnamese',
          'ingredients': [
            'Rice flour',
            'Shrimp',
            'Pork belly',
            'Bean sprouts',
            'Turmeric',
          ],
        },
      ];
    }
  }
}
