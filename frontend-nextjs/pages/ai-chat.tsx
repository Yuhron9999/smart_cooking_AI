import React, { useState, useRef, useEffect } from 'react';
import Head from 'next/head';
import { GetServerSideProps } from 'next';
import { getSession } from 'next-auth/react';
import Header from '@/components/layout/Header';
import {
    Send,
    Mic,
    MicOff,
    Camera,
    Image as ImageIcon,
    Sparkles,
    ChefHat,
    Clock,
    Users,
    Star,
    Bot,
    User
} from 'lucide-react';

interface Message {
    id: string;
    type: 'user' | 'ai';
    content: string;
    timestamp: Date;
    isTyping?: boolean;
}

export default function AIChatPage() {
    const [messages, setMessages] = useState<Message[]>([
        {
            id: '1',
            type: 'ai',
            content: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa Smart Cooking. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ c√¥ng th·ª©c n·∫•u ƒÉn, c√°ch ch·∫ø bi·∫øn m√≥n ƒÉn, ho·∫∑c t√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·∫°o m√≥n ƒÉn t·ª´ nguy√™n li·ªáu c√≥ s·∫µn. B·∫°n mu·ªën l√†m g√¨ h√¥m nay? üç≥',
            timestamp: new Date()
        }
    ]);

    const [inputMessage, setInputMessage] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [isRecording, setIsRecording] = useState(false);
    const messagesEndRef = useRef<HTMLDivElement>(null);
    const inputRef = useRef<HTMLInputElement>(null);

    const quickPrompts = [
        {
            text: "T·∫°o c√¥ng th·ª©c t·ª´ nguy√™n li·ªáu c√≥ s·∫µn",
            icon: <Sparkles className="h-4 w-4" />,
            prompt: "T√¥i c√≥ th·ªãt b√≤, rau mu·ªëng, c√† chua, h√†nh t√¢y trong t·ªß l·∫°nh. B·∫°n c√≥ th·ªÉ g·ª£i √Ω m√≥n ƒÉn v√† c√¥ng th·ª©c n·∫•u kh√¥ng?"
        },
        {
            text: "M√≥n ƒÉn truy·ªÅn th·ªëng Vi·ªát Nam",
            icon: <ChefHat className="h-4 w-4" />,
            prompt: "H∆∞·ªõng d·∫´n t√¥i n·∫•u m·ªôt m√≥n ƒÉn truy·ªÅn th·ªëng Vi·ªát Nam d·ªÖ l√†m cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu"
        },
        {
            text: "M√≥n ƒÉn nhanh 15 ph√∫t",
            icon: <Clock className="h-4 w-4" />,
            prompt: "G·ª£i √Ω m√≥n ƒÉn c√≥ th·ªÉ l√†m xong trong 15 ph√∫t cho b·ªØa s√°ng"
        },
        {
            text: "M√≥n ƒÉn cho nh√≥m b·∫°n",
            icon: <Users className="h-4 w-4" />,
            prompt: "T√¥i c·∫ßn n·∫•u cho 6 ng∆∞·ªùi, g·ª£i √Ω m√≥n ƒÉn d·ªÖ l√†m v√† ngon"
        }
    ];

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    };

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    const handleSendMessage = async () => {
        if (!inputMessage.trim() || isLoading) return;

        const userMessage: Message = {
            id: Date.now().toString(),
            type: 'user',
            content: inputMessage,
            timestamp: new Date()
        };

        setMessages(prev => [...prev, userMessage]);
        setInputMessage('');
        setIsLoading(true);

        // Simulate AI typing
        const typingMessage: Message = {
            id: (Date.now() + 1).toString(),
            type: 'ai',
            content: '',
            timestamp: new Date(),
            isTyping: true
        };
        setMessages(prev => [...prev, typingMessage]);

        try {
            // Call AI API
            const response = await fetch('/api/ai/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: inputMessage,
                    conversation_history: messages.slice(-10) // Last 10 messages for context
                }),
            });

            if (response.ok) {
                const data = await response.json();

                // Remove typing indicator and add real response
                setMessages(prev => {
                    const filtered = prev.filter(msg => !msg.isTyping);
                    return [...filtered, {
                        id: Date.now().toString(),
                        type: 'ai',
                        content: data.response,
                        timestamp: new Date()
                    }];
                });
            } else {
                throw new Error('API call failed');
            }
        } catch (error) {
            console.error('Chat error:', error);

            // Remove typing indicator and show error
            setMessages(prev => {
                const filtered = prev.filter(msg => !msg.isTyping);
                return [...filtered, {
                    id: Date.now().toString(),
                    type: 'ai',
                    content: 'Xin l·ªói, t√¥i ƒëang g·∫∑p m·ªôt ch√∫t tr·ª•c tr·∫∑c. Vui l√≤ng th·ª≠ l·∫°i sau. ü§ñ',
                    timestamp: new Date()
                }];
            });
        } finally {
            setIsLoading(false);
        }
    };

    const handleKeyPress = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage();
        }
    };

    const handleQuickPrompt = (prompt: string) => {
        setInputMessage(prompt);
        inputRef.current?.focus();
    };

    const toggleRecording = () => {
        setIsRecording(!isRecording);
        // Implement voice recording logic here
    };

    const formatTime = (date: Date) => {
        return date.toLocaleTimeString('vi-VN', {
            hour: '2-digit',
            minute: '2-digit'
        });
    };

    return (
        <>
            <Head>
                <title>AI Chat - Smart Cooking AI</title>
                <meta name="description" content="Tr√≤ chuy·ªán v·ªõi AI v·ªÅ n·∫•u ƒÉn, t·∫°o c√¥ng th·ª©c v√† nh·∫≠n t∆∞ v·∫•n m√≥n ƒÉn" />
            </Head>

            <div className="min-h-screen bg-gray-50">
                <Header />

                <div className="max-w-4xl mx-auto px-4 py-8">
                    {/* Chat Header */}
                    <div className="bg-white rounded-t-2xl shadow-lg border-b border-gray-200 px-6 py-4">
                        <div className="flex items-center space-x-3">
                            <div className="relative">
                                <div className="w-12 h-12 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center">
                                    <Bot className="h-6 w-6 text-white" />
                                </div>
                                <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white"></div>
                            </div>
                            <div>
                                <h1 className="text-xl font-bold text-gray-900">Smart Cooking AI</h1>
                                <p className="text-sm text-gray-500">Tr·ª£ l√Ω n·∫•u ƒÉn th√¥ng minh ‚Ä¢ ƒêang ho·∫°t ƒë·ªông</p>
                            </div>
                        </div>
                    </div>

                    {/* Chat Messages */}
                    <div className="bg-white shadow-lg max-h-96 overflow-y-auto">
                        <div className="px-6 py-4 space-y-4">
                            {messages.map((message) => (
                                <div
                                    key={message.id}
                                    className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                                >
                                    <div className={`flex items-start space-x-3 max-w-3xl ${message.type === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>
                                        {/* Avatar */}
                                        <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${message.type === 'user'
                                                ? 'bg-blue-500'
                                                : 'bg-gradient-to-r from-orange-500 to-red-500'
                                            }`}>
                                            {message.type === 'user' ? (
                                                <User className="h-4 w-4 text-white" />
                                            ) : (
                                                <Bot className="h-4 w-4 text-white" />
                                            )}
                                        </div>

                                        {/* Message Bubble */}
                                        <div className={`rounded-2xl px-4 py-3 ${message.type === 'user'
                                                ? 'bg-blue-500 text-white'
                                                : 'bg-gray-100 text-gray-900'
                                            }`}>
                                            {message.isTyping ? (
                                                <div className="flex space-x-1">
                                                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                                                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-100"></div>
                                                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-200"></div>
                                                </div>
                                            ) : (
                                                <div>
                                                    <p className="whitespace-pre-wrap">{message.content}</p>
                                                    <p className={`text-xs mt-2 ${message.type === 'user' ? 'text-blue-100' : 'text-gray-500'
                                                        }`}>
                                                        {formatTime(message.timestamp)}
                                                    </p>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                </div>
                            ))}
                            <div ref={messagesEndRef} />
                        </div>
                    </div>

                    {/* Quick Prompts */}
                    <div className="bg-white border-t border-gray-200 px-6 py-4">
                        <p className="text-sm text-gray-600 mb-3">G·ª£i √Ω c√¢u h·ªèi:</p>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                            {quickPrompts.map((prompt, index) => (
                                <button
                                    key={index}
                                    onClick={() => handleQuickPrompt(prompt.prompt)}
                                    className="flex items-center space-x-2 p-3 text-left text-sm border border-gray-200 rounded-lg hover:border-orange-300 hover:bg-orange-50 transition-colors"
                                >
                                    <span className="text-orange-500">{prompt.icon}</span>
                                    <span className="text-gray-700">{prompt.text}</span>
                                </button>
                            ))}
                        </div>
                    </div>

                    {/* Input Area */}
                    <div className="bg-white rounded-b-2xl shadow-lg border-t border-gray-200 px-6 py-4">
                        <div className="flex items-center space-x-3">
                            {/* Voice Recording Button */}
                            <button
                                onClick={toggleRecording}
                                className={`p-3 rounded-full transition-colors ${isRecording
                                        ? 'bg-red-500 text-white animate-pulse'
                                        : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                                    }`}
                            >
                                {isRecording ? <MicOff className="h-5 w-5" /> : <Mic className="h-5 w-5" />}
                            </button>

                            {/* Image Upload Button */}
                            <button
                                title="T·∫£i ·∫£nh l√™n"
                                className="p-3 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors"
                            >
                                <ImageIcon className="h-5 w-5" />
                            </button>

                            {/* Message Input */}
                            <div className="flex-1 relative">
                                <input
                                    ref={inputRef}
                                    type="text"
                                    value={inputMessage}
                                    onChange={(e) => setInputMessage(e.target.value)}
                                    onKeyPress={handleKeyPress}
                                    placeholder="H·ªèi t√¥i v·ªÅ m√≥n ƒÉn, c√¥ng th·ª©c n·∫•u ƒÉn..."
                                    className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 outline-none"
                                    disabled={isLoading}
                                />
                            </div>

                            {/* Send Button */}
                            <button
                                title="G·ª≠i tin nh·∫Øn"
                                onClick={handleSendMessage}
                                disabled={!inputMessage.trim() || isLoading}
                                className="p-3 bg-gradient-to-r from-orange-500 to-red-500 text-white rounded-full hover:from-orange-600 hover:to-red-600 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                            >
                                <Send className="h-5 w-5" />
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </>
    );
}

export const getServerSideProps: GetServerSideProps = async (context: any) => {
    const session = await getSession(context);

    // Optional: Require authentication for AI chat
    // if (!session) {
    //   return {
    //     redirect: {
    //       destination: '/auth/signin',
    //       permanent: false,
    //     },
    //   };
    // }

    return {
        props: {
            session,
        },
    };
};
