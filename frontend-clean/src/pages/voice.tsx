// Pages - Voice Assistant Page
import React, { useState, useEffect, useRef } from 'react';
import { NextPage } from 'next';
import Head from 'next/head';
import { Mic, MicOff, Volume2, VolumeX, Play, Pause, RotateCcw, Settings } from 'lucide-react';
import Header from '@/components/layout/Header';

interface VoiceCommand {
    id: string;
    text: string;
    timestamp: Date;
    response: string;
    isPlaying?: boolean;
}

const VoiceAssistantPage: NextPage = () => {
    const [isListening, setIsListening] = useState(false);
    const [isSpeaking, setIsSpeaking] = useState(false);
    const [isEnabled, setIsEnabled] = useState(true);
    const [currentText, setCurrentText] = useState('');
    const [commands, setCommands] = useState<VoiceCommand[]>([]);
    const [language, setLanguage] = useState('vi-VN');
    const [voiceSpeed, setVoiceSpeed] = useState(1);
    const [showSettings, setShowSettings] = useState(false);

    const recognitionRef = useRef<any>(null);
    const synthRef = useRef<any>(null);

    useEffect(() => {
        // Check if browser supports speech recognition
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
            const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;
            recognitionRef.current = new SpeechRecognition();

            recognitionRef.current.continuous = false;
            recognitionRef.current.interimResults = true;
            recognitionRef.current.lang = language;

            recognitionRef.current.onresult = (event: any) => {
                const transcript = event.results[0][0].transcript;
                setCurrentText(transcript);

                if (event.results[0].isFinal) {
                    handleVoiceCommand(transcript);
                }
            };

            recognitionRef.current.onerror = (event: any) => {
                console.error('Speech recognition error:', event.error);
                setIsListening(false);
            };

            recognitionRef.current.onend = () => {
                setIsListening(false);
            };
        }

        // Initialize speech synthesis
        if ('speechSynthesis' in window) {
            synthRef.current = window.speechSynthesis;
        }

        return () => {
            if (recognitionRef.current) {
                recognitionRef.current.stop();
            }
            if (synthRef.current) {
                synthRef.current.cancel();
            }
        };
    }, [language]);

    const handleVoiceCommand = async (text: string) => {
        const response = generateResponse(text);

        const command: VoiceCommand = {
            id: Date.now().toString(),
            text,
            timestamp: new Date(),
            response
        };

        setCommands(prev => [command, ...prev]);

        // Speak the response
        if (isEnabled && synthRef.current) {
            speakText(response);
        }
    };

    const generateResponse = (command: string): string => {
        const lowerCommand = command.toLowerCase();

        if (lowerCommand.includes('c√¥ng th·ª©c') || lowerCommand.includes('n·∫•u')) {
            return 'T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·∫°o c√¥ng th·ª©c n·∫•u ƒÉn. B·∫°n c√≥ th·ªÉ n√≥i "t·∫°o c√¥ng th·ª©c v·ªõi g√† v√† rau c·ªß" ho·∫∑c "h∆∞·ªõng d·∫´n n·∫•u ph·ªü b√≤".';
        }

        if (lowerCommand.includes('nguy√™n li·ªáu')) {
            return 'H√£y cho t√¥i bi·∫øt nh·ªØng nguy√™n li·ªáu b·∫°n c√≥, t√¥i s·∫Ω g·ª£i √Ω m√≥n ƒÉn ph√π h·ª£p. V√≠ d·ª•: "T√¥i c√≥ th·ªãt heo, khoai t√¢y v√† c√† r√≥t".';
        }

        if (lowerCommand.includes('dinh d∆∞·ª°ng') || lowerCommand.includes('calo')) {
            return 'T√¥i c√≥ th·ªÉ ph√¢n t√≠ch dinh d∆∞·ª°ng cho m√≥n ƒÉn. H√£y n√≥i t√™n m√≥n ƒÉn v√† kh·∫©u ph·∫ßn, v√≠ d·ª•: "Ph√¢n t√≠ch dinh d∆∞·ª°ng m·ªôt b√°t ph·ªü b√≤".';
        }

        if (lowerCommand.includes('k·ªπ thu·∫≠t') || lowerCommand.includes('h∆∞·ªõng d·∫´n')) {
            return 'T√¥i c√≥ th·ªÉ h∆∞·ªõng d·∫´n c√°c k·ªπ thu·∫≠t n·∫•u ƒÉn. B·∫°n mu·ªën h·ªçc k·ªπ thu·∫≠t n√†o? V√≠ d·ª•: "H∆∞·ªõng d·∫´n c√°ch x√†o rau" ho·∫∑c "K·ªπ thu·∫≠t n∆∞·ªõng th·ªãt".';
        }

        if (lowerCommand.includes('ch√†o') || lowerCommand.includes('xin ch√†o')) {
            return 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω gi·ªçng n√≥i Smart Cooking. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ n·∫•u ƒÉn, c√¥ng th·ª©c v√† k·ªπ thu·∫≠t n·∫•u ƒÉn. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?';
        }

        return `T√¥i ƒë√£ nghe: "${command}". T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·∫°o c√¥ng th·ª©c, h∆∞·ªõng d·∫´n n·∫•u ƒÉn, ph√¢n t√≠ch dinh d∆∞·ª°ng ho·∫∑c t∆∞ v·∫•n k·ªπ thu·∫≠t n·∫•u ƒÉn. B·∫°n mu·ªën t√¥i gi√∫p g√¨?`;
    };

    const speakText = (text: string) => {
        if (!synthRef.current) return;

        synthRef.current.cancel();

        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = language;
        utterance.rate = voiceSpeed;
        utterance.pitch = 1;

        utterance.onstart = () => setIsSpeaking(true);
        utterance.onend = () => setIsSpeaking(false);
        utterance.onerror = () => setIsSpeaking(false);

        synthRef.current.speak(utterance);
    };

    const startListening = () => {
        if (!recognitionRef.current || isListening) return;

        setCurrentText('');
        setIsListening(true);
        recognitionRef.current.start();
    };

    const stopListening = () => {
        if (!recognitionRef.current || !isListening) return;

        recognitionRef.current.stop();
        setIsListening(false);
    };

    const stopSpeaking = () => {
        if (synthRef.current) {
            synthRef.current.cancel();
            setIsSpeaking(false);
        }
    };

    const playResponse = (commandId: string, text: string) => {
        // Stop current speech
        if (synthRef.current) {
            synthRef.current.cancel();
        }

        // Update playing state
        setCommands(prev => prev.map(cmd => ({
            ...cmd,
            isPlaying: cmd.id === commandId
        })));

        speakText(text);

        // Reset playing state after speech
        setTimeout(() => {
            setCommands(prev => prev.map(cmd => ({
                ...cmd,
                isPlaying: false
            })));
        }, text.length * 50); // Rough estimate of speech duration
    };

    const clearHistory = () => {
        setCommands([]);
        setCurrentText('');
        if (synthRef.current) {
            synthRef.current.cancel();
        }
    };

    const quickCommands = [
        {
            text: "T·∫°o c√¥ng th·ª©c v·ªõi nguy√™n li·ªáu c√≥ s·∫µn",
            command: "T·∫°o c√¥ng th·ª©c v·ªõi nguy√™n li·ªáu t√¥i c√≥"
        },
        {
            text: "H∆∞·ªõng d·∫´n k·ªπ thu·∫≠t n·∫•u ƒÉn c∆° b·∫£n",
            command: "H∆∞·ªõng d·∫´n k·ªπ thu·∫≠t n·∫•u ƒÉn c∆° b·∫£n"
        },
        {
            text: "Ph√¢n t√≠ch dinh d∆∞·ª°ng m√≥n ƒÉn",
            command: "Ph√¢n t√≠ch dinh d∆∞·ª°ng m√≥n ph·ªü b√≤"
        },
        {
            text: "G·ª£i √Ω m√≥n ƒÉn h√¥m nay",
            command: "G·ª£i √Ω m√≥n ƒÉn cho b·ªØa t·ªëi h√¥m nay"
        }
    ];

    return (
        <>
            <Head>
                <title>Tr·ª£ l√Ω Gi·ªçng n√≥i - Smart Cooking AI</title>
                <meta name="description" content="Tr·ª£ l√Ω gi·ªçng n√≥i th√¥ng minh cho n·∫•u ƒÉn - ƒëi·ªÅu khi·ªÉn b·∫±ng gi·ªçng n√≥i" />
            </Head>

            <div className="min-h-screen bg-gray-50">
                <Header />

                <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
                    {/* Page Header */}
                    <div className="text-center mb-8">
                        <h1 className="text-3xl font-bold text-gray-900 mb-2 flex items-center justify-center">
                            <Mic className="h-8 w-8 mr-3 text-orange-500" />
                            Tr·ª£ l√Ω Gi·ªçng n√≥i
                        </h1>
                        <p className="text-gray-600">
                            N√≥i chuy·ªán v·ªõi AI v·ªÅ n·∫•u ƒÉn - Nh·∫•n n√∫t mic v√† b·∫Øt ƒë·∫ßu n√≥i
                        </p>
                    </div>

                    {/* Voice Controls */}
                    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-8 mb-8">
                        <div className="text-center">
                            {/* Main Voice Button */}
                            <div className="mb-6">
                                <button
                                    onClick={isListening ? stopListening : startListening}
                                    className={`w-24 h-24 rounded-full flex items-center justify-center transition-all duration-300 ${isListening
                                            ? 'bg-red-500 hover:bg-red-600 animate-pulse'
                                            : 'bg-orange-500 hover:bg-orange-600'
                                        }`}
                                    disabled={!isEnabled}
                                    title={isListening ? 'Nh·∫•n ƒë·ªÉ d·ª´ng nghe' : 'Nh·∫•n ƒë·ªÉ b·∫Øt ƒë·∫ßu n√≥i'}
                                >
                                    {isListening ? (
                                        <MicOff className="h-10 w-10 text-white" />
                                    ) : (
                                        <Mic className="h-10 w-10 text-white" />
                                    )}
                                </button>
                            </div>

                            {/* Status Text */}
                            <div className="mb-6">
                                {isListening && (
                                    <div className="text-lg text-gray-700 mb-2">
                                        üé§ ƒêang nghe...
                                    </div>
                                )}
                                {isSpeaking && (
                                    <div className="text-lg text-blue-600 mb-2">
                                        üîä ƒêang ph√°t √¢m...
                                    </div>
                                )}
                                {currentText && (
                                    <div className="bg-gray-50 rounded-lg p-3 max-w-md mx-auto">
                                        <p className="text-gray-700 italic">&quot;{currentText}&quot;</p>
                                    </div>
                                )}
                                {!isListening && !isSpeaking && !currentText && (
                                    <p className="text-gray-500">
                                        Nh·∫•n n√∫t mic v√† n√≥i c√¢u l·ªánh c·ªßa b·∫°n
                                    </p>
                                )}
                            </div>

                            {/* Control Buttons */}
                            <div className="flex justify-center space-x-4">
                                <button
                                    onClick={() => setIsEnabled(!isEnabled)}
                                    className={`p-3 rounded-lg transition-colors ${isEnabled
                                            ? 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                            : 'bg-red-100 text-red-700 hover:bg-red-200'
                                        }`}
                                    title={isEnabled ? 'T·∫Øt √¢m thanh' : 'B·∫≠t √¢m thanh'}
                                >
                                    {isEnabled ? <Volume2 className="h-5 w-5" /> : <VolumeX className="h-5 w-5" />}
                                </button>

                                {isSpeaking && (
                                    <button
                                        onClick={stopSpeaking}
                                        className="p-3 rounded-lg bg-red-100 text-red-700 hover:bg-red-200 transition-colors"
                                        title="D·ª´ng ph√°t √¢m"
                                    >
                                        <Pause className="h-5 w-5" />
                                    </button>
                                )}

                                <button
                                    onClick={clearHistory}
                                    className="p-3 rounded-lg bg-gray-100 text-gray-700 hover:bg-gray-200 transition-colors"
                                    title="X√≥a l·ªãch s·ª≠"
                                >
                                    <RotateCcw className="h-5 w-5" />
                                </button>

                                <button
                                    onClick={() => setShowSettings(!showSettings)}
                                    className="p-3 rounded-lg bg-gray-100 text-gray-700 hover:bg-gray-200 transition-colors"
                                    title="C√†i ƒë·∫∑t"
                                >
                                    <Settings className="h-5 w-5" />
                                </button>
                            </div>
                        </div>
                    </div>

                    {/* Settings Panel */}
                    {showSettings && (
                        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
                            <h3 className="text-lg font-semibold text-gray-900 mb-4">C√†i ƒë·∫∑t</h3>

                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">
                                        Ng√¥n ng·ªØ nh·∫≠n d·∫°ng
                                    </label>
                                    <select
                                        value={language}
                                        onChange={(e) => setLanguage(e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                                        aria-label="Ch·ªçn ng√¥n ng·ªØ nh·∫≠n d·∫°ng gi·ªçng n√≥i"
                                    >
                                        <option value="vi-VN">Ti·∫øng Vi·ªát</option>
                                        <option value="en-US">English</option>
                                        <option value="ja-JP">Êó•Êú¨Ë™û</option>
                                        <option value="ko-KR">ÌïúÍµ≠Ïñ¥</option>
                                    </select>
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-2">
                                        T·ªëc ƒë·ªô gi·ªçng n√≥i: {voiceSpeed}x
                                    </label>
                                    <input
                                        type="range"
                                        min="0.5"
                                        max="2"
                                        step="0.1"
                                        value={voiceSpeed}
                                        onChange={(e) => setVoiceSpeed(parseFloat(e.target.value))}
                                        className="w-full"
                                        aria-label="ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô gi·ªçng n√≥i"
                                    />
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Quick Commands */}
                    <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 mb-8">
                        <h3 className="text-lg font-semibold text-gray-900 mb-4">C√¢u l·ªánh nhanh</h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                            {quickCommands.map((item, index) => (
                                <button
                                    key={index}
                                    onClick={() => handleVoiceCommand(item.command)}
                                    className="text-left p-3 bg-gray-50 rounded-lg hover:bg-orange-50 hover:border-orange-200 border border-gray-200 transition-colors"
                                >
                                    <div className="font-medium text-gray-900">{item.text}</div>
                                    <div className="text-sm text-gray-500 mt-1">&quot;{item.command}&quot;</div>
                                </button>
                            ))}
                        </div>
                    </div>

                    {/* Command History */}
                    {commands.length > 0 && (
                        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                            <div className="flex justify-between items-center mb-4">
                                <h3 className="text-lg font-semibold text-gray-900">L·ªãch s·ª≠ h·ªôi tho·∫°i</h3>
                                <span className="text-sm text-gray-500">{commands.length} l·ªánh</span>
                            </div>

                            <div className="space-y-4">
                                {commands.map((command) => (
                                    <div key={command.id} className="border-l-4 border-orange-200 pl-4">
                                        <div className="flex justify-between items-start mb-2">
                                            <div className="flex-1">
                                                <div className="font-medium text-gray-900 mb-1">
                                                    üé§ &quot;{command.text}&quot;
                                                </div>
                                                <div className="text-gray-700 bg-gray-50 rounded p-2">
                                                    ü§ñ {command.response}
                                                </div>
                                            </div>
                                            <div className="flex items-center space-x-2 ml-4">
                                                <button
                                                    onClick={() => playResponse(command.id, command.response)}
                                                    className="p-2 text-gray-400 hover:text-orange-500 transition-colors"
                                                    title="Ph√°t l·∫°i ph·∫£n h·ªìi"
                                                >
                                                    {command.isPlaying ? (
                                                        <Pause className="h-4 w-4" />
                                                    ) : (
                                                        <Play className="h-4 w-4" />
                                                    )}
                                                </button>
                                                <span className="text-xs text-gray-400">
                                                    {command.timestamp.toLocaleTimeString('vi-VN')}
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}

                    {/* Browser Support Check */}
                    {'webkitSpeechRecognition' in window || 'SpeechRecognition' in window ? null : (
                        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 text-center">
                            <p className="text-yellow-800">
                                Tr√¨nh duy·ªát c·ªßa b·∫°n ch∆∞a h·ªó tr·ª£ nh·∫≠n d·∫°ng gi·ªçng n√≥i.
                                Vui l√≤ng s·ª≠ d·ª•ng Chrome, Edge ho·∫∑c Safari ƒë·ªÉ c√≥ tr·∫£i nghi·ªám t·ªët nh·∫•t.
                            </p>
                        </div>
                    )}
                </main>
            </div>
        </>
    );
};

export default VoiceAssistantPage;
