// Pages - AI Assistant Page
import React, { useState, useRef, useEffect } from 'react';
import { NextPage } from 'next';
import Head from 'next/head';
import { Send, Bot, User, Mic, Image as ImageIcon, Loader2, Sparkles } from 'lucide-react';
import Header from '@/components/layout/Header';
import Image from 'next/image';

interface Message {
    id: string;
    content: string;
    role: 'user' | 'assistant';
    timestamp: Date;
    type?: 'text' | 'image';
    imageUrl?: string;
}

const AIAssistantPage: NextPage = () => {
    const [messages, setMessages] = useState<Message[]>([
        {
            id: '1',
            content: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa Smart Cooking. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·∫°o c√¥ng th·ª©c n·∫•u ƒÉn, nh·∫≠n d·∫°ng m√≥n ƒÉn t·ª´ h√¨nh ·∫£nh, ho·∫∑c t∆∞ v·∫•n v·ªÅ n·∫•u ƒÉn. B·∫°n c·∫ßn t√¥i gi√∫p g√¨ h√¥m nay?',
            role: 'assistant',
            timestamp: new Date()
        }
    ]);
    const [input, setInput] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [isListening, setIsListening] = useState(false);
    const messagesEndRef = useRef<HTMLDivElement>(null);
    const fileInputRef = useRef<HTMLInputElement>(null);

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    };

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    const handleSendMessage = async () => {
        if (!input.trim() || isLoading) return;

        const userMessage: Message = {
            id: Date.now().toString(),
            content: input,
            role: 'user',
            timestamp: new Date()
        };

        setMessages(prev => [...prev, userMessage]);
        setInput('');
        setIsLoading(true);

        // Simulate AI response
        setTimeout(() => {
            const aiResponse: Message = {
                id: (Date.now() + 1).toString(),
                content: generateAIResponse(input),
                role: 'assistant',
                timestamp: new Date()
            };
            setMessages(prev => [...prev, aiResponse]);
            setIsLoading(false);
        }, 1500);
    };

    const generateAIResponse = (userInput: string): string => {
        const lowerInput = userInput.toLowerCase();

        if (lowerInput.includes('c√¥ng th·ª©c') || lowerInput.includes('n·∫•u')) {
            return 'T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t·∫°o c√¥ng th·ª©c n·∫•u ƒÉn! B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt:\n\n‚Ä¢ Nh·ªØng nguy√™n li·ªáu b·∫°n c√≥\n‚Ä¢ Lo·∫°i m√≥n ƒÉn b·∫°n mu·ªën (ch√≠nh, tr√°ng mi·ªáng, v.v.)\n‚Ä¢ Th·ªùi gian n·∫•u mong mu·ªën\n‚Ä¢ Kh·∫©u v·ªã ƒë·∫∑c bi·ªát (cay, ng·ªçt, v.v.)\n\nH√£y chia s·∫ª th√¥ng tin n√†y v√† t√¥i s·∫Ω t·∫°o c√¥ng th·ª©c ph√π h·ª£p cho b·∫°n!';
        }

        if (lowerInput.includes('h√¨nh ·∫£nh') || lowerInput.includes('·∫£nh') || lowerInput.includes('nh·∫≠n d·∫°ng')) {
            return 'ƒê·ªÉ nh·∫≠n d·∫°ng m√≥n ƒÉn t·ª´ h√¨nh ·∫£nh, b·∫°n c√≥ th·ªÉ:\n\nüì∏ Nh·∫•n v√†o bi·ªÉu t∆∞·ª£ng camera ƒë·ªÉ ch·ª•p ·∫£nh\nüñºÔ∏è Ho·∫∑c t·∫£i l√™n h√¨nh ·∫£nh c√≥ s·∫µn\n\nT√¥i s·∫Ω ph√¢n t√≠ch h√¨nh ·∫£nh v√†:\n‚Ä¢ Nh·∫≠n d·∫°ng m√≥n ƒÉn\n‚Ä¢ ∆Ø·ªõc t√≠nh nguy√™n li·ªáu\n‚Ä¢ G·ª£i √Ω c√¥ng th·ª©c t∆∞∆°ng t·ª±\n‚Ä¢ ƒê√°nh gi√° dinh d∆∞·ª°ng';
        }

        if (lowerInput.includes('dinh d∆∞·ª°ng') || lowerInput.includes('calo')) {
            return 'T√¥i c√≥ th·ªÉ gi√∫p b·∫°n ph√¢n t√≠ch dinh d∆∞·ª°ng! H√£y cho t√¥i bi·∫øt:\n\nüçΩÔ∏è M√≥n ƒÉn b·∫°n mu·ªën ph√¢n t√≠ch\nüìè Kh·∫©u ph·∫ßn ƒÉn\n‚öñÔ∏è C√¢n n·∫∑ng nguy√™n li·ªáu (n·∫øu c√≥)\n\nT√¥i s·∫Ω cung c·∫•p th√¥ng tin v·ªÅ:\n‚Ä¢ Calories\n‚Ä¢ Protein, carbs, ch·∫•t b√©o\n‚Ä¢ Vitamin v√† kho√°ng ch·∫•t\n‚Ä¢ G·ª£i √Ω c·∫£i thi·ªán dinh d∆∞·ª°ng';
        }

        if (lowerInput.includes('k·ªπ thu·∫≠t') || lowerInput.includes('c√°ch n·∫•u')) {
            return 'T√¥i c√≥ th·ªÉ h∆∞·ªõng d·∫´n c√°c k·ªπ thu·∫≠t n·∫•u ƒÉn:\n\nüî• K·ªπ thu·∫≠t nhi·ªát (x√†o, lu·ªôc, n∆∞·ªõng, h·∫•p)\nüî™ K·ªπ thu·∫≠t dao (c·∫Øt, th√°i, bƒÉm)\nü•Ñ K·ªπ thu·∫≠t gia v·ªã v√† n√™m n·∫øm\n‚è∞ Timing v√† ƒë·ªô ch√≠n\n\nB·∫°n mu·ªën h·ªçc k·ªπ thu·∫≠t n√†o c·ª• th·ªÉ?';
        }

        return 'C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª! T√¥i hi·ªÉu b·∫°n ƒëang quan t√¢m ƒë·∫øn n·∫•u ƒÉn. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n‚Ä¢ üìù T·∫°o c√¥ng th·ª©c t·ª´ nguy√™n li·ªáu c√≥ s·∫µn\n‚Ä¢ üì∏ Nh·∫≠n d·∫°ng m√≥n ƒÉn qua h√¨nh ·∫£nh\n‚Ä¢ üçé T∆∞ v·∫•n dinh d∆∞·ª°ng\n‚Ä¢ üë®‚Äçüç≥ H∆∞·ªõng d·∫´n k·ªπ thu·∫≠t n·∫•u ƒÉn\n‚Ä¢ üåü G·ª£i √Ω m√≥n ƒÉn ph√π h·ª£p\n\nB·∫°n mu·ªën t√¥i gi√∫p g√¨ c·ª• th·ªÉ h∆°n kh√¥ng?';
    };

    const handleKeyPress = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage();
        }
    };

    const handleVoiceInput = () => {
        setIsListening(!isListening);
        // Voice recognition logic would go here
        setTimeout(() => setIsListening(false), 3000);
    };

    const handleImageUpload = () => {
        fileInputRef.current?.click();
    };

    const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files?.[0];
        if (file) {
            const imageUrl = URL.createObjectURL(file);
            const imageMessage: Message = {
                id: Date.now().toString(),
                content: 'ƒê√£ t·∫£i l√™n h√¨nh ·∫£nh ƒë·ªÉ ph√¢n t√≠ch',
                role: 'user',
                timestamp: new Date(),
                type: 'image',
                imageUrl
            };

            setMessages(prev => [...prev, imageMessage]);
            setIsLoading(true);

            // Simulate image analysis
            setTimeout(() => {
                const aiResponse: Message = {
                    id: (Date.now() + 1).toString(),
                    content: 'üîç **K·∫øt qu·∫£ ph√¢n t√≠ch h√¨nh ·∫£nh:**\n\nM√≥n ƒÉn ƒë∆∞·ª£c nh·∫≠n d·∫°ng: **Ph·ªü B√≤**\n\n**Nguy√™n li·ªáu ch√≠nh:**\n‚Ä¢ B√°nh ph·ªü\n‚Ä¢ Th·ªãt b√≤ th√°i l√°t\n‚Ä¢ H√†nh t√¢y\n‚Ä¢ Ng√≤ gai, h√†nh l√°\n‚Ä¢ N∆∞·ªõc d√πng x∆∞∆°ng b√≤\n\n**∆Ø·ªõc t√≠nh dinh d∆∞·ª°ng:**\n‚Ä¢ Calories: ~450 kcal\n‚Ä¢ Protein: 25g\n‚Ä¢ Carbs: 60g\n‚Ä¢ Ch·∫•t b√©o: 12g\n\n**G·ª£i √Ω:** M√≥n ph·ªü n√†y tr√¥ng r·∫•t ngon! B·∫°n c√≥ mu·ªën t√¥i chia s·∫ª c√¥ng th·ª©c n·∫•u ph·ªü b√≤ truy·ªÅn th·ªëng kh√¥ng?',
                    role: 'assistant',
                    timestamp: new Date()
                };
                setMessages(prev => [...prev, aiResponse]);
                setIsLoading(false);
            }, 2000);
        }
    };

    const quickActions = [
        {
            text: "T·∫°o c√¥ng th·ª©c t·ª´ nguy√™n li·ªáu",
            icon: <Sparkles className="h-4 w-4" />,
            action: () => setInput("T√¥i c√≥ [nguy√™n li·ªáu b·∫°n c√≥], h√£y t·∫°o c√¥ng th·ª©c n·∫•u ƒÉn cho t√¥i")
        },
        {
            text: "Ph√¢n t√≠ch dinh d∆∞·ª°ng",
            icon: <Bot className="h-4 w-4" />,
            action: () => setInput("H√£y ph√¢n t√≠ch dinh d∆∞·ª°ng c·ªßa m√≥n ƒÉn n√†y cho t√¥i")
        },
        {
            text: "H∆∞·ªõng d·∫´n k·ªπ thu·∫≠t n·∫•u ƒÉn",
            icon: <User className="h-4 w-4" />,
            action: () => setInput("T√¥i mu·ªën h·ªçc k·ªπ thu·∫≠t n·∫•u ƒÉn c∆° b·∫£n")
        }
    ];

    return (
        <>
            <Head>
                <title>Tr·ª£ l√Ω AI - Smart Cooking AI</title>
                <meta name="description" content="Tr√≤ chuy·ªán v·ªõi tr·ª£ l√Ω AI th√¥ng minh v·ªÅ n·∫•u ƒÉn, t·∫°o c√¥ng th·ª©c v√† nh·∫≠n d·∫°ng m√≥n ƒÉn" />
            </Head>

            <div className="min-h-screen bg-gray-50 flex flex-col">
                <Header />

                <main className="flex-1 max-w-4xl mx-auto w-full px-4 sm:px-6 lg:px-8 py-8 flex flex-col">
                    {/* Page Header */}
                    <div className="text-center mb-8">
                        <h1 className="text-3xl font-bold text-gray-900 mb-2 flex items-center justify-center">
                            <Bot className="h-8 w-8 mr-3 text-orange-500" />
                            Tr·ª£ l√Ω AI Smart Cooking
                        </h1>
                        <p className="text-gray-600">
                            H·ªèi t√¥i v·ªÅ c√¥ng th·ª©c n·∫•u ƒÉn, k·ªπ thu·∫≠t, ho·∫∑c t·∫£i l√™n h√¨nh ·∫£nh ƒë·ªÉ nh·∫≠n d·∫°ng m√≥n ƒÉn
                        </p>
                    </div>

                    {/* Quick Actions */}
                    <div className="mb-6">
                        <div className="flex flex-wrap gap-2 justify-center">
                            {quickActions.map((action, index) => (
                                <button
                                    key={index}
                                    onClick={action.action}
                                    className="flex items-center px-4 py-2 bg-white border border-gray-200 rounded-full text-sm text-gray-700 hover:bg-orange-50 hover:border-orange-200 hover:text-orange-700 transition-colors"
                                >
                                    {action.icon}
                                    <span className="ml-2">{action.text}</span>
                                </button>
                            ))}
                        </div>
                    </div>

                    {/* Chat Messages */}
                    <div className="flex-1 bg-white rounded-lg shadow-sm border border-gray-200 flex flex-col overflow-hidden">
                        <div className="flex-1 overflow-y-auto p-4 space-y-4">
                            {messages.map((message) => (
                                <div
                                    key={message.id}
                                    className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                                >
                                    <div className={`flex items-start space-x-2 max-w-3xl ${message.role === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>
                                        <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${message.role === 'user' ? 'bg-orange-500' : 'bg-gray-100'}`}>
                                            {message.role === 'user' ? (
                                                <User className="h-4 w-4 text-white" />
                                            ) : (
                                                <Bot className="h-4 w-4 text-gray-600" />
                                            )}
                                        </div>
                                        <div className={`px-4 py-2 rounded-lg ${message.role === 'user' ? 'bg-orange-500 text-white' : 'bg-gray-100 text-gray-900'}`}>
                                            {message.type === 'image' && message.imageUrl && (
                                                <div className="mb-2">
                                                    <Image
                                                        src={message.imageUrl}
                                                        alt="Uploaded"
                                                        className="max-w-xs rounded-lg"
                                                        style={{ width: 'auto', height: 'auto' }}
                                                    />
                                                </div>
                                            )}
                                            <div className="whitespace-pre-wrap">{message.content}</div>
                                            <div className={`text-xs mt-1 ${message.role === 'user' ? 'text-orange-100' : 'text-gray-500'}`}>
                                                {message.timestamp.toLocaleTimeString('vi-VN', {
                                                    hour: '2-digit',
                                                    minute: '2-digit'
                                                })}
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            ))}

                            {isLoading && (
                                <div className="flex justify-start">
                                    <div className="flex items-start space-x-2">
                                        <div className="flex-shrink-0 w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center">
                                            <Bot className="h-4 w-4 text-gray-600" />
                                        </div>
                                        <div className="px-4 py-2 rounded-lg bg-gray-100">
                                            <div className="flex items-center space-x-2">
                                                <Loader2 className="h-4 w-4 animate-spin" />
                                                <span>ƒêang suy nghƒ©...</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            )}

                            <div ref={messagesEndRef} />
                        </div>

                        {/* Input Area */}
                        <div className="border-t border-gray-200 p-4">
                            <div className="flex items-end space-x-2">
                                <button
                                    onClick={handleImageUpload}
                                    className="flex-shrink-0 p-2 text-gray-400 hover:text-orange-500 transition-colors"
                                    title="T·∫£i l√™n h√¨nh ·∫£nh"
                                >
                                    <ImageIcon className="h-5 w-5" />
                                </button>

                                <button
                                    onClick={handleVoiceInput}
                                    className={`flex-shrink-0 p-2 transition-colors ${isListening ? 'text-red-500' : 'text-gray-400 hover:text-orange-500'}`}
                                    title="Ghi √¢m gi·ªçng n√≥i"
                                >
                                    <Mic className={`h-5 w-5 ${isListening ? 'animate-pulse' : ''}`} />
                                </button>

                                <div className="flex-1 relative">
                                    <textarea
                                        value={input}
                                        onChange={(e) => setInput(e.target.value)}
                                        onKeyPress={handleKeyPress}
                                        placeholder="Nh·∫≠p tin nh·∫Øn... (Enter ƒë·ªÉ g·ª≠i)"
                                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-none ai-assistant-textarea"
                                        rows={1}
                                    />
                                </div>

                                <button
                                    onClick={handleSendMessage}
                                    disabled={!input.trim() || isLoading}
                                    aria-label="Send message"
                                    className="flex-shrink-0 p-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                                >
                                    <Send className="h-5 w-5" />
                                </button>
                            </div>
                        </div>
                    </div>

                    <input
                        ref={fileInputRef}
                        type="file"
                        accept="image/*"
                        onChange={handleFileSelect}
                        className="hidden"
                        title="T·∫£i l√™n h√¨nh ·∫£nh"
                        placeholder="Ch·ªçn h√¨nh ·∫£nh ƒë·ªÉ t·∫£i l√™n"
                    />
                </main>
            </div>
        </>
    );
};

export default AIAssistantPage;
